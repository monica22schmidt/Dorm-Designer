public class Furniture implements DormGUI{
    private PApplet processing;
    private PImage image;
    private float[] position;
    private boolean isDragging;
    private int rotations;
    private String type;

    // initializes the fields of a new bed object positioned in the center of the display
    public Furniture(String s, PApplet processing) {
        this.type = s;
        rotations = 0;
        this.processing = processing;
        this.image = processing.loadImage("images/" + s + ".png");
        // creates new array
        float[] positions = new float[2];
        this.position = positions;
        this.isDragging = false;
        // initializes the positions of the furniture
        positions[1] = processing.height / 2;
        positions[0] = processing.width / 2;
    }

    /*
     * This is a furniture overload method. It take parameters from the load button It displays the
     * objects generated by the load button.
     */
    public Furniture(float[] Positions, int loadRotation, String s, PApplet processing) {
        this.processing = processing;
        try {
            this.type = s;
            this.image = processing.loadImage("images/" + s + ".png");
            rotations = loadRotation;
            // creates new array
            this.position = new float[2];
            this.position = Positions;
            this.isDragging = false;
            // initializes the positions of the furniture
            this.position[1] = Positions[1];
            this.position[0] = Positions[0];
        } catch (NullPointerException e) {
            System.out.print("WARNING: Could not find an image for a furniture object of type: "
                            + this.type);
        }

    }

    /*
     * This method is a helper method to make the code more readable It decided if the mouse is over
     * the object base on the width and height of the object
     */
    public boolean findMousePosition(int WIDTH, int HEIGHT) {
        boolean answer = false;
        // Checks to see if the mouse is within the bound of the object
        if (processing.mouseX > position[0] - WIDTH / 2
                        && processing.mouseX < position[0] + WIDTH / 2
                        && processing.mouseY > position[1] - HEIGHT / 2
                        && processing.mouseY < position[1] + HEIGHT / 2) {
            answer = true;
        }
        return answer;
    }

    /*
     * Accessor method to get the values stored in position
     */
    public float[] getPositions() {
        return this.position;
    }

    /*
     * Accessor method to get the value stored in rotations
     */
    public int getRotations() {
        return this.rotations;
    }

    /*
     * Accessor method to get the value stored in type
     */
    public String getType() {
        return this.type;
    }

    // draws this bed at its current position
    public void update() {
        // Checks to see if is dragging is true if it is the furniture will follow the mouse
        if (this.isDragging == true) {
            this.position[0] = processing.mouseX;
            this.position[1] = processing.mouseY;
         // checks for even rotations
            if (this.rotations % 2 == 0) {
                processing.image(this.image, position[0], position[1], rotations * PApplet.PI / 2);
            }
            // Checks for odd rotations
            else if (rotations % 2 == 1) {
                processing.image(this.image, position[0], position[1], rotations * PApplet.PI / 2);
            }
        }
     // checks for even rotations
        else if (this.rotations % 2 == 0) {
            processing.image(this.image, position[0], position[1], rotations * PApplet.PI / 2);
        }
        // Checks for odd rotations
        else if (rotations % 2 == 1) {
            processing.image(this.image, position[0], position[1], rotations * PApplet.PI / 2);
        }
    }

    // used to start dragging the bed, when the mouse is over this bed when it is pressed
    public void mouseDown(Furniture[] furniture) {
        // Checks if the mouse if over the object
        if (isMouseOver() == true) {
            // makes dragging true
            this.isDragging = true;
        }
    }

    // used to indicate that the bed is no longer being dragged
    public void mouseUp() {
        // makes dragging false
        this.isDragging = false;
    }

    // helper method to determine whether the mouse is currently over this bed
    public boolean isMouseOver() {
        boolean answer = false;
        // Checks if there is positions
        if (this.position != null) {
            // checks to see if the mouse is within the bounds
            answer = findMousePosition(this.image.width, this.image.height);

        }
        // changes rotates for even number of time
        if (this.rotations % 2 == 0) {
            // checks to see if the mouse is within the bounds
            answer = findMousePosition(this.image.width, this.image.height);

        }
        // changes rotates for odd number of times
        if (this.rotations % 2 == 1) {
            // checks to see if the mouse is within the bounds
            answer = findMousePosition(this.image.width, this.image.height);
        }
        return answer;
    }

    public void rotate() {
        // increments rotate
        this.rotations += 1;
    }
}

